# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'tablero.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from brainflow.board_shim import BoardShim, BrainFlowInputParams, BoardIds
from brainflow.data_filter import DataFilter, NoiseTypes, FilterTypes 

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 442)
        
        #screen_geometry = QtWidgets.QDesktopWidget().screenGeometry()

        screen_geometry = QtWidgets.QDesktopWidget().availableGeometry()
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.ka = QtWidgets.QLabel(self.centralwidget)
        self.ka.setGeometry(screen_geometry)
        self.ka.setText("")
        self.ka.setPixmap(QtGui.QPixmap("blanco.png"))
        self.ka.setObjectName("ka")
        self.bo = QtWidgets.QLabel(self.centralwidget)
        self.bo.setGeometry(screen_geometry)
        self.bo.setText("")
        self.bo.setPixmap(QtGui.QPixmap("negro.png"))
        self.bo.setObjectName("bo")

        self.plus = QtWidgets.QPushButton(self.centralwidget)
        self.plus.setGeometry(QtCore.QRect(screen_geometry.width()-190, 400, 75*2, 23*2))
        self.plus.setObjectName("plus")

        self.minus = QtWidgets.QPushButton(self.centralwidget)
        self.minus.setGeometry(QtCore.QRect(screen_geometry.width()-190, 600, 75*2, 23*2))
        self.minus.setObjectName("minus")

        self.minus.setStyleSheet("background-color: rgb(30, 144, 255);")
        self.plus.setStyleSheet("background-color: rgb(220, 20, 60);")

        self.pushButton2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton2.setGeometry(QtCore.QRect(screen_geometry.width()-190, 130, 150, 50))
        self.pushButton2.setObjectName("pushButton2")

        self.pushButtonStop = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonStop.setGeometry(QtCore.QRect(screen_geometry.width()-190, 210, 150, 50))
        self.pushButtonStop.setObjectName("pushButtonStop")   

        self.pushButtonReset = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonReset.setGeometry(QtCore.QRect(screen_geometry.width()-190, 290, 150, 50))
        self.pushButtonReset.setObjectName("reset")

        self.pushButtonConnect = QtWidgets.QPushButton(self.centralwidget)
        self.pushButtonConnect.setGeometry(QtCore.QRect(screen_geometry.width()-190, 50, 150, 50))
        self.pushButtonConnect.setObjectName("connect")
        self.pushButtonConnect.setStyleSheet("background-color: rgb(109, 255, 93);")
     
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(screen_geometry.width()-190, 500, 64*2, 23*2))
        self.lcdNumber.setObjectName("lcdNumber")
        
        
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 600, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.button_count = 200

        self.lcdNumber.display(self.button_count)
        self.plus.clicked.connect(self.clicked)
        self.minus.clicked.connect(self.clicked2)
        self.pushButton2.clicked.connect(self.begin)
        self.pushButtonStop.clicked.connect(self.stopTimer)
        self.pushButtonReset.clicked.connect(self.reset)
        self.pushButtonConnect.clicked.connect(self.conectarCyton)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.plus.setText(_translate("MainWindow", "+"))
        self.minus.setText(_translate("MainWindow", "-"))
        self.pushButton2.setText(_translate("MainWindow", "Start"))
        self.pushButtonStop.setText(_translate("MainWindow", "Stop"))
        self.pushButtonReset.setText(_translate("MainWindow", "Reset Counter"))
        self.pushButtonConnect.setText(_translate("MainWindow", "Conectar Cyton"))

    def enabled(self):
        freq2=100
        if self.button_count>0:
            self.bo.setVisible(False)
            print("paso por enabled") 
            self.timerB = QtCore.QTimer()
            self.timerB.timeout.connect(self.disabled)
            self.timerB.start(freq2)
            self.button_count -= 1
            self.lcdNumber.display(self.button_count)
            self.board.insert_marker(1)
            
        else:
            self.timerA.stop()
            self.board.stop_stream()
            data = self.board.get_board_data()
            DataFilter.write_file(data, 'Signal-EEG-flash.csv', 'a')
        
    def disabled(self):
        self.bo.setVisible(True)
        print("paso por disabled") 
        
    def stopTimer(self):
        self.timerA.stop()
        self.board.stop_stream()
        data = self.board.get_board_data()
        DataFilter.write_file(data, 'Signal-EEG-flash.csv', 'a')  # use 'a' for append mode 
 
    def begin(self):
        self.board.start_stream(900000) #arranca la cyton
        freq = 900
        self.timerA = QtCore.QTimer()
        self.timerA.timeout.connect(self.enabled)
        self.timerA.start(freq)
        #print("entro a begin")

    def conectarCyton(self):
        #SE ESTABLECE COMUNICACIÃ–N CON CYTHON
        #BoardShim.enable_board_logger()
        BoardShim.enable_dev_board_logger()
        params = BrainFlowInputParams()
        #params.serial_port = '/dev/ttyUSB0'
        params.serial_port = 'COM12'
        #params.timeout = 0
        #params.file = ''
        board_id = BoardIds.SYNTHETIC_BOARD.value
        #board_id = BoardIds.CYTON_BOARD.value
        self.board = BoardShim(board_id, params)
        self.board.prepare_session()

        # self.board.config_board('x1060100X')
        # self.board.config_board('x2160100X')
        # self.board.config_board('x3160100X')
        # self.board.config_board('x4160100X')
        # self.board.config_board('x5160100X')
        # self.board.config_board('x6160100X')
        # self.board.config_board('x7160100X')
        # self.board.config_board('x8160100X')      

    def reset(self):
        self.button_count = 200
        print(self.button_count)
        self.lcdNumber.display(self.button_count) 
         
    def clicked(self):
        self.button_count += 25
        print(self.button_count)
        self.lcdNumber.display(self.button_count)

    def clicked2(self):
        self.button_count -= 25
        print(self.button_count)
        self.lcdNumber.display(self.button_count)
        if self.button_count <= 0:
                self.button_count=0
                self.lcdNumber.display(self.button_count)
            
class MainWindow(QtWidgets.QMainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)

    def keyPressEvent(self, event):
        if event.key() == QtCore.Qt.Key_Escape or event.key() == QtCore.Qt.Key_Space:
            self.showNormal()


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    window = MainWindow()
      
    window.showFullScreen()
    app.installEventFilter(window)
    sys.exit(app.exec_())
